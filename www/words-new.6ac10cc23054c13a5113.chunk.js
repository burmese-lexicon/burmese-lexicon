(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"resources/elements/new-word-page":function(e,r,t){"use strict";t.r(r),function(e){t.d(r,"NewWordPage",function(){return h});var n=t(45),i=t(29),o=t(35),a=t("aurelia-framework"),s=t("aurelia-validation"),l=function(e,r,t,n){var i,o=arguments.length,a=o<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,r,t,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(r,t,a):i(r,t))||a);return o>3&&a&&Object.defineProperty(r,t,a),a},d=function(e,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,r)},u=function(r,t,n,i){return new(n||(n=e))(function(e,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(r){r.done?e(r.value):new n(function(e){e(r.value)}).then(a,s)}l((i=i.apply(r,t||[])).next())})},c=function(e,r){var t,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,n&&(i=n[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=r.call(e,a)}catch(e){o=[6,e],n=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},h=function(){function e(e,r,t,n,i){this.validationControllerFactory=e,this.validator=r,this.wordApi=t,this.authService=n,this.router=i,this.MAX_DEFFINITION_LENGTH=3e3,this.MAX_WORD_LENGTH=20,this.isFormValid=!1,this.defPlaceholder="[မြန်မာ][English]",this.controller=e.createForCurrentScope(r),this.controller.validateTrigger=s.validateTrigger.changeOrBlur,this.controller.subscribe(this.updateIsFormValid.bind(this)),s.ValidationRules.ensure(function(e){return e.word}).matches(/^[\u1000-\u109F]*$/).withMessage("${$displayName} can only have Burmese letters and no spaces.").maxLength(this.MAX_WORD_LENGTH).required().ensure(function(e){return e.definition}).maxLength(this.MAX_DEFFINITION_LENGTH).required().ensure(function(e){return e.agreedTOS}).equals(!0).withMessage("${$displayName} is required.").required().on(this)}return e.prototype.activate=function(e){this.word=e.word},e.prototype.updateIsFormValid=function(e){var r=this;this.validator.validateObject(this).then(function(e){r.isFormValid=e.every(function(e){return e.valid})}),this.formState=""},e.prototype.submit=function(){return u(this,void 0,void 0,function(){var e,r=this;return c(this,function(t){switch(t.label){case 0:this.formState="loading",this.serverValidateResult&&this.controller.removeError(this.serverValidateResult),t.label=1;case 1:return t.trys.push([1,4,,5]),[4,this.wordApi.getWord(this.word)];case 2:return t.sent().exists?(this.serverValidateResult=this.controller.addError("This word already exists",this),this.formState="",[2]):[4,this.wordApi.addWord(this.word,this.definition,this.authService.user.uid)];case 3:return t.sent(),this.formState="success",window.setTimeout(function(){return r.router.navigate("/words/"+r.word)},3e3),[3,5];case 4:return e=t.sent(),console.error(e),this.formState="error",[3,5];case 5:return[2]}})})},e=l([a.b,d("design:paramtypes",[s.ValidationControllerFactory,s.Validator,n.a,o.a,i.d])],e)}()}.call(this,t(11))},"resources/elements/new-word-page.html":function(e,r,t){e.exports="<template>\n  <require from='./new-word-page.scss'></require>\n  <require from='./text-editor'></require>\n  <require from='./email-verification'></require>\n\n  <div class='centered wide column'>\n    <email-verification if.bind='!authService.verified'></email-verification>\n    <form\n      class=\"ui form ${controller.errors.length ? 'error' : ''} ${formState}\"\n      submit.delegate='submit()'\n      else\n    >\n      <h1 class='ui header'>Add new word</h1>\n      <ul if.bind=\"formState !== 'error' && controller.errors\" class='ui error message'>\n        <li repeat.for=\"error of controller.errors\">\n          ${error.message}\n        </li>\n      </ul>\n      <div class='ui success message'>\n        The word ${word} has been added successfully.\n      </div>\n      <div class='ui error message' if.bind='formState === \"error\"'>\n        There was an error adding the word. Please try again later.\n      </div>\n      <div class=\"required field\">\n        <label>Word</label>\n        <input type=\"text\" name=\"word\" placeholder=\"စကားလုံး\" value.bind='word & validate' required>\n      </div>\n      <div class=\"required field\">\n        <label>Definition</label>\n        <em>Definitions can have maximum ${MAX_DEFFINITION_LENGTH} characters.</em>\n        <text-editor\n          text.bind='definition & validate'\n          placeholder.bind='defPlaceholder'\n          maxlength.bind='MAX_DEFINITION_LENGTH'\n        >\n        </text-editor>\n      </div>\n      <div class=\"required field\">\n        <div class=\"ui checkbox\">\n          <input id='tos-checkbox' type=\"checkbox\" tabindex=\"0\" class=\"hidden\" checked.bind=\"agreedTOS & validate\" required>\n          <label for='tos-checkbox'>I agree to the Terms and Conditions</label>\n        </div>\n      </div>\n      <button class=\"ui button ${!isFormValid ? 'disabled' : ''}\" type=\"submit\">Submit</button>\n    </form>\n  </div>\n</template>\n"},"resources/elements/new-word-page.scss":function(e,r,t){(e.exports=t(44)(!1)).push([e.i,".new-word-page input {\n  max-width: 25em; }\n",""])}}]);
//# sourceMappingURL=words-new.6ac10cc23054c13a5113.bundle.map