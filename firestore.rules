service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    
    function isAdmin() {
    	return isLoggedIn()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    function isMod() {
    	return isLoggedIn()
      	&& get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['mod']);
    }
    
    function isLoggedIn() {
    	return request.auth.uid != null
    }
    
    function isOwner(doc) {
    	return isLoggedIn() && request.auth.uid == doc.data.user
    }
    
    function onlyUpdateVoting(oldDef, definition) {
    	return definition.data.keys().hasAll(['text', 'createdAt', 'user', 'word', 'votes'])
      	&& definition.data.size() == 5
        && (definition.data.votes[request.auth.uid] >= -1
        			&& definition.data.votes[request.auth.uid] <= 1
        		)
        && oldDef.data.text == definition.data.text
        && oldDef.data.user == definition.data.user
        && oldDef.data.word == definition.data.word
    }
 
 		match /users/{user} {
    	allow read: if isAdmin() || resource.id == request.auth.uid
    }

    match /words/{word} {
    	allow create: if isAdmin()
      	|| (isLoggedIn()
          && request.resource.id is string && request.resource.id.matches("^[\u1000-\u109F]{1,30}$")
          && request.resource.data.user == request.auth.uid
          && request.resource.data.createdAt is int
          && request.resource.data.text == request.resource.id
          && request.resource.data.size() == 3
          && !exists(/databases/$(database)/documents/words/$(request.resource.id))
      	)
      allow read: if true
      allow update, delete: if isAdmin() || isMod()
    }
    
    match /definitions/{definition} {
    	allow create: if isAdmin()
      	|| (isLoggedIn()
          && request.resource.data.text != null && request.resource.data.text.size() < 3000
          && request.resource.data.user == request.auth.uid
          && request.resource.data.createdAt is int
          && request.resource.data.size() == 4
          && exists(/databases/$(database)/documents/words/$(request.resource.data.word))
      	)
      allow list: if true
      allow delete: if isAdmin() || isMod() || isOwner(resource)
      allow update: if isAdmin() || isMod()
      	|| (isOwner(resource)
      	&& request.resource.data.text is string && request.resource.data.text.size() < 3000
      	&& request.resource.data.createdAt is int
      	&& request.resource.data.word == resource.data.word
          && (
          	(!(request.resource.data.keys().hasAll(['votes'])) && request.resource.data.size() == 4)
          	|| (request.resource.data.keys().hasAll(['votes']) && request.resource.data.size() == 5)
          )
        )
        // only allow voting on others' defs
        || (isLoggedIn() && resource.data.user != request.auth.uid
        	&& onlyUpdateVoting(resource, getAfter(/databases/$(database)/documents/definitions/$(request.resource.id)))
        )
    }
    
    match /public-users/{user} {
    	allow read: if true
      allow update: if isAdmin()
      	|| (request.resource.id == request.auth.uid
          && request.resource.data.name.matches(".{1,20}")
          && (request.resource.data.photoURL == null
          	|| (request.resource.data.photoURL is string
            	&& request.resource.data.photoURL.size() <= 2083
            )
          )
          && request.resource.data.size() <= 2
        )
    }
    
    match /requested-words/{word} {
    	allow read: if true
      allow create: if isLoggedIn()
          && request.resource.id is string && request.resource.id.matches("^[\u1000-\u109F]{1,30}$")
          && request.resource.data.user == request.auth.uid
          && !exists(/databases/$(database)/documents/requested-words/$(request.resource.id))
          && !exists(/databases/$(database)/documents/words/$(request.resource.id))
          && request.resource.data.size() == 1
      allow update, delete: if isAdmin() || isMod()
    }
  
    match /word-list/{list} {
    	allow read: if true
    }
    
    match /stats/{stats} {
    	allow read: if true
    }
    
    match /contributions/{contribution} {
    	allow read: if true
    }
  }
}
